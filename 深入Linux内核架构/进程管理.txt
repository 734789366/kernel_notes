在多处理器系统中，真正可并行运行的进程数目取决于物理CPU的数目。
多任务必须解决两个问题：
	内核必须决定为各个进程分配多长的时间，何时切换到下个进程；
	内核从进程A切换到进程B时，必须确保进程B最后切换回时的执行环境与上一次撤销其处理器时完全相同；

从用户态切换到内核态的两种方法是：
	系统调用
	异常

内核的抢占调度模型可判断哪些进程可以由其他进程抢占：
	普通进程可以被实时进程抢占，甚至是由其他普通进程抢占
	老的内核里，如果系统处于内核态并正在处理系统调用，那么系统中的其他进程无法夺取其CPU资源，除非是中断。后来内核支持抢占后就可以由内核抢占该进程。
	中断具有最高优先级，可以暂停用户态和核心态的进程
 
进程状态，task_struct结构体的state指定了进程的当前状态：
	TASK_RUNNING
	TASK_INTERRUPTIBLE
	TASK_UNINTERRUPTIBLE
	TASK_STOPPED
	TASK_TRACED
	EXIT_ZOMBIE
	EXIT_DEAD

Linux提供资源限制功能，对进程能够使用的系统资源进行限制，利用task_struct结构中的rlim数组，系统调用setrlimit来增减当前限制，getrlimit来检查当前的限制，也可以在proc文件系统中查看，每个进程都包含了一个对应的文件：cat /proc/self/limits

创建新进程：
	1.fork()生成当前进程的一个相同副本，这两个进程之间的联系包括：同一组打开的文件、同样的工作目录、内存中同样的数据（彼此共享一个副本，写时复制）等，除此之外别无关联。exec从一个可执行的二进制文件加载另一个应用程序到生成的子进程中执行；
	2.clone系统调用，其原理基本与fork相同，但新进程并不独立于父进程，通过在调用函数时传递进去特定的参数，子进程可以与父进程共享某些资源。

命名空间：提供了虚拟化的一种轻量级形式。在虚拟化系统中，一台物理计算机可以运行多个内核，可能是多个并行的操作系统。而命名空间则只使用一个内核在一台物理计算机上运行，所有全局资源都通过命名空间抽象起来，放置到容器数据结构中。只有资源和包含资源的命名空间构成的二元数组是全局唯一的。在给定容器内部，资源是自足的，但是无法提供在容器外部具有唯一性的PID。

命名空间可以组织为层次结构，父命名空间衍生出子命名空间，父进程可以看到子进程的命名空间。
命名空间也可以是非层次的，父子命名空间之间没有联系。如UST命名空间。

命名空间的创建方法：
	1.在fork或clone系统调用创建新进程时，有特定选项控制是创建新命名空间还是与父进程共享命名空间
	2.unshare系统调用将子进程的某些部分从父进程分离，包括命名空间。

命名空间的实现需要两部分：
	1.每个子系统的命名空间结构，将全局资源分配到其中
	2.将进程关联到各所属的命名空间的机制

每个可以感知命名空间的子系统都必须提供一个数据结构，将所有通过命名空间形式提供的对象集中起来。struct nsproxy用于汇集指向特定于子系统的命名空间包装器的指针：
struct nsproxy{
    atomic_t count;
    struct uts_namespace *uts_ns;    //unix timesharing system，提供内核名称、版本、底层体系结构类型等信息
    struct ipc_namespace *ipc_ns;
    struct mnt_namespace *mnt_ns;
    struct pid_namespace *pid_ns;
    struct user_namespace *user_ns;    //提供用于限制每个用户使用资源的信息
    struct net *net_ns;
}    

各子系统初始的命名空间对象：
#define INIT_NSPROXY(nsproxy) {\
    .pid_ns = &init_pid_ns,\
    .count=ATOMIC_INIT(1),\
    .uts_ns=&init_uts_ns,\
    .mnt_ns=&NULL,\
    INIT_NET_NS(net_ns)\
    INIT_IPC_NS(ipc_ns)\
    .user_ns=&init_user_ns,\
}
每个进程都有一个指针用于关联到自身的命名空间，struct nsproxy *nsproxy;，多个进程可共享一组子命名空间。

进程ID
	PID：UNIX进程总是会被分配来用于在其命名空间中唯一标示他们的ID号；
	TGID：处于某个线程组的所有进程都有统一的线程组ID。其中的主进程称为组长进程（group leader）；
	PGRP：独立的进程可以合并成进程组（使用setpgrp），各成员的pgrp属性都是相同的，都是进程组组长进程的PID。其中，用管道连接的进程会包含在一个进程组中；
	SID：几个进程组可以合并为一个会话（使用setdid），会话中的所有进程都有同样的会话ID，保存在task_struct的session成员中；

PID命名空间按层次结构组织，子命名空间中的所有PID对父命名空间都是可见的，但是子命名空间无法看到父命名空间中的PID。这意味着某些进程具有多个PID，凡是能够看到该进程的命名空间都会为该进程分配一个PID。因此在数据结构中，必须区分全局ID和局部ID。
	全局ID：是在内核本身和初始命名空间中的唯一ID，对每个ID类型，都有一个给定的全局ID，保证在系统中是唯一的。
	局部ID：属于某个命名空间的ID，不具有全局性，在其他命名空间中可能有类型和值都相同的ID。

全局PID和TGID都直接包含在task_struct的pid和tgid成员中。
会话ID和进程组ID不直接包含在task_struct中，而是包含在信号处理的结构中，task_struct->signal->__session表示全局SID，task_struct->signal->pgrp保存全局pgrp。set_task_session、set_task_pgrp可用于修改这些值。

PID命名空间的表示方式
struct pid_namespace{
    ...
    struct task_struct *child_reaper;
    ...
    int level;
    struct pid_namespace *parent;
}
每个命名空间中都有一个进程相当于全局init进程，用于对孤儿进程调用wait4，child_reaper保存了指向该进程的task_struct指针
parent指向父命空间的指针
level表示当前命名空间在命名空间层次结构中的深度，初始level=0，子空间level=1，下一层为2。从level即可知道进程会关联到多少个ID。


进程管理相关的系统调用：
fork、vfork、clone相对应的系统调用接口分别是sys_fork、sys_vfork、sys_clone。上述函数的任务是从处理器寄存器中提取出由用户
空间提供的信息，调用体系结构无关的函数do_fork，负责进程复制。

进程复制采用COW技术，使内核尽可能延迟内存页的复制，或者根本不复制。如果内存将一页标记为“只读”，但实际上该页是可写的，内核就据此条件来判断该页实际上是COW的。

Linux有时在操作成功的时候需要返回指针，而在失败的时候返回错误码，而C语言每个函数只允许一个返回码，因此任何与错误有关的信息都必须编码到指针中。Linux支持的每个体系结构的虚拟地址空间中都有一个从虚拟地址0到至少4K的区域，该区域中没有任何有用的信息，因此内核可以用该地址范围来编码错误码。如果fork的返回值指向前述的地址返回内部，那么该调用就失败了，其原因可用指针的值判断。ERR_PTR是一个辅助宏，用于将数值常数编码为指针。

复制进程时，父进程与子进程只有一个不同，就是新进程分配了一个新的核心态栈，即task_struct->stack。通常栈和thread_info保存在同一个联合体中，thread_info保存了线程所需的所有特定于处理器的底层信息。
内核栈的默认大小是2页，即8K，其中一部分被thread_info占用。
thread_info保存了特定于体系结构的汇编语言代码需要访问的那部分进程数据。如果内核的某个组件使用了过多的栈空间时，内核栈会溢出到thread_info部分，这将导致严重的故障。

内核线程是直接由内核本身启动的进程，实际上是将内核函数委托给独立的进程，与系统中其他的进程并行执行。内核线程也常称为内核守护进程。
有两种类型的内核线程：
	1.线程启动后一直等待着，直到内核请求线程执行某一特定操作
	2.系统启动后按周期性间隔运行。
调用kernel_thread可用于启动一个内核线程，调用do_fork函数。
创建内核线程：
	kthread_create，该线程最初是停止的，需要调用wake_up_process启动。
	kthread_run，调用kthread_create创建新线程，并唤醒
	kthread_create_cpu，创建新线程，并绑定到指定的CPU
内核线程会出现在系统的进程列表中，在ps的输出中，由方括号与其他进程区别开来

内核线程特点：
	1.由内核自身生成，运行在CPU的supervisor mode，而不是用户态。
	2.它们只能够访问虚拟地址空间的内核部分，高于TASK_SIZE的地址，而不能访问用户空间。
struct task_struct{
...
  struct mm_struct *mm, *active_mm;  
...
}
mm指向虚拟地址空间中的用户空间部分
active_mm保存mm的备份
虚拟地址空间分两部分，底部可以由用户层程序访问，上部则供内核使用。为了强调用户空间部分不能访问，将mm设置为NULL，但由于内核必须知道用户空间当前包含了什么，所以在active_mm中保存了mm的备份。
当内核在进程上下文运行时，mm和active_mm相同

启动新程序：
创建了新的进程后，即可启动新程序，Linux使用execve系统调用来实现，对应的体系结构相关的接口为sys_execve函数，该函数很快调用体系结构无关的函数do_execve。

退出进程
进程用exit停止，使得内核有机会将进程的资源释放，该系统调用的入口点是sys_exit函数，并很快将工作委托给do_exit。




