CISC(复杂指令集计算机)和RISC(精简指令集计算机)是当前CPU的两种架构。它们的区别在于不同的CPU设计理念和方法。
早期的CPU全部是CISC架构，它的设计目的是要用最少的机器语言指令来完成所需的计算任务。RISC和CISC是设计制造微处理器的两种典型技术，虽然它们都是试图在体系结构、操作运行、软件硬件、编译时间和运行时间等诸多因素中做出某种平衡，以求达到高效的目的，但采用的方法不同，因此，在很多方面差异很大。
RISC是一种执行较少类型计算机指令的微处理器，设计者把主要精力放在那些经常使用的指令上，尽量使它们具有简单高效的特色。对不常用的功能，常通过组合指令来完成。因此，在RISC机器上实现特殊功能时，效率可能较低。但可以利用流水技术和超标量技术加以改进和弥补。
而CISC计算机的指令系统比较丰富，有专用指令来完成特定的功能。因此，处理特殊任务效率较高。

在CISC微处理器中，程序的各条指令是按顺序串行执行的，每条指令中的各个操作也是按顺序串行执行的。顺序执行的优点是控制简单，但计算机各部分的利用率不高，执行速度慢。因为计算机执行每个指令类型都需要额外的晶体管和电路元件，计算机指令集越大就会使微处理器更复杂，执行操作也会更慢。
CISC CPU包含有丰富的电路单元，因而功能强、面积大、功耗大。
RISC CPU包含有较少的单元电路，因而面积小、功耗低。
CISC 机器则更适合于通用机。
RISC 由于RISC指令系统的确定与特定的应用领域有关，故RISC 机器更适合于专用机。

之前有篇文章是关于CPU架构的简单介绍的，但是里面提到了两个名词“复杂指令集”和“精简指令集”可能很多人不（想了）解，的确它们从名字上来看就是无比枯燥又无比技术化的名词，但是它们与我们生活又如此紧密。为了方便后面讲述，使用它们的简称，“复杂指令集”——CISC，“精简指令集”——RISC，你记住C表示Complex，R表示Reduce就不会弄混了。
为什么说它们和我们的生活非常紧密呢？想想平时用的电脑，手机，哪一个不需要CPU，虽然CPU核心数有多又少，频率也有差别，但是从最根本的上的架构上来说CPU就只有CISC和RISC，而这两者的地位的代表就是现在的手机和PC（当然并非绝对，有跨界产品的）。
CISC出现的比较早，因为PC的年代，电和发热的问题都是有解的，性能是CPU关注的焦点，为了提升性能，一些复杂的指令会直接集成到CPU中，CISC设计的目的就是为了用最少的机器语言指令来完成所需的计算任务，把一些可能带有逻辑处理运算直接设置成一条指令，为了满足实际使用的需要，集成的复杂指令会越来越多，这就意味着CPU的设计复杂程度也越来越高。
而较晚出现的RISC的设计则是基于CISC设计的反向思考，根据“二八”原则，CISC的指令集中只有20%的指令被频繁用到，把那些最常用的指令保留下来就是RISC。当然不是原封不动的保留，比如RISC设计的指令集是等长的，而CISC的指令集是非等长的，你可以想象成CPU在读绝句（等长）和散文（不等长）。
关于指令集的复杂和精简我们可以这样理解，CISC把需要多个指令组合才能完成的操作直接做成一条指令，就像我们平时都说都说女人是复杂的动物，说的话也是非常烧脑的，让很多老司机都难以驾驭，当一个女孩对她的男朋友说“我病了”，其复杂程度堪比CISC，而很多新司机支持的是RISC，无法将“我病了”翻译成“心情不好”、“买礼物”、“立刻到我身边”等等一系列操作而出现了不兼容的情况。
虽然我们认为的手机的使用场景需要用功耗低的CPU，所以选RISC架构的CPU，其实也不全然如此，手机的耗电场景复杂，无线通讯模块，屏幕，各种后台常驻的软件都是耗电大户，手机太耗电的锅也不该由CPU的架构来背。虽然CISC架构CPU的技术上领先很多，性能强劲，但这种CPU工艺复杂，卖的贵，而RISC架构的CPU制造成本低廉，对手机来说便宜又够用，手机厂商当然大多都选它了。

CISC发命令：吃饭
RISC发命令：先拿起勺子——把手放到碗上方——舀一勺子饭——送到嘴里。
所以在进行“吃饭”这个应用的时候，CISC只需要不断地喊吃饭吃饭就行了，而RISC要不断重复4个步骤，所以对于这种应用，CISC明显更快。
但是如果要喝水，CISC就要先训练你会喝水，然后直接发一个喝水命令。对于RISC，把步骤中碗改为杯子就行了，不需要任何前期训练的负担。
所以，随着应用增多，CISC也要训练更多不同的指令，所以越来越复杂.