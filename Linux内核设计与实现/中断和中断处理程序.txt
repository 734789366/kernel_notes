  1. 外设发出中断，并送到中断控制器，由中断控制器发送信号给处理器，处理器再通知操作系统对中断进行处理。中断随时随地可以产生，而异常与中断不同，异常产生时必须与处理器的时钟同步，因此异常被称为同步中断。
  2. 中断处理程序是用来服务于特定中断的，它们运行在中断上下文中，不能阻塞。中断随时可能发生，因此中断服务程序也随时可能执行，而在执行中断服务程序期间，相应的中断线在所有处理器上都是被关闭的，因此中断服务程序必须尽可能的快速执行。
  3. 一般把中断处理切分为两个部分，中断处理程序是上半部，在关闭中断的情况下，处理一些对时间要求比较严格的工作，其他的可以被推后执行的工作都会被推迟到下半部，在开中断的情况下执行。
  4. 设备驱动程序通过request_irq()来注册一个中断服务程序，free_irq()释放中断处理程序。
  5. 当执行一个中断处理程序时，内核处于中断上下文中，因为没有后备进程，所以在中断上下文不可以睡眠，否则当中断服务程序结束后，无法重新调度。中断上下文中的代码应当迅速、简洁，尽量把工作从中断处理程序中分离出来，放到下半部来执行。
  6. Linux内核提供了接口能够禁止当前处理器的中断，或屏蔽掉某条中断线。控制中断系统的原因归根结底是提供同步，通过禁止中断，可以确保某个中断处理程序不会抢占当前代码，此外禁止中断还可以禁止内核抢占，但是不管是禁止中断还是禁止抢占，都不能防止来自其他处理器的并发访问。
  锁提供保护机制来防止来自其他处理器的并发访问，而禁止中断则提供保护机制，来防止来自其他中断处理程序的并发访问。
      a. local_irq_disable()、local_irq_enable()
      b. local_irq_save()、local_irq_restore()
      c. disable_irq()、disable_irq_nosync()、enable_irq()、enable_irq_nosync()
      d. in_irq()、in_interrupt()
  7. 中断下半部的任务就是执行与中断密切相关，但是中断处理程序本身不执行的任务。下半部执行的关键在于，当他们执行的时候，允许响应中断。
      a. 如果一个任务对时间非常敏感，那么将其放在中断处理程序中执行；
      b. 如果一个任务和硬件相关，将其放在中断处理程序中执行；
      c. 如果一个任务要求保证不能被其他中断打断，则将其放在中断处理程序中；
      d. 其他任务放在下半部执行
  8. 下半部的实现有多种机制，软中断、tasklet、工作队列。
      a. 软中断是一组静态定义的下半部接口，有32个，在编译期间静态分配。软中断保留给系统中对时间要求最严格以及最重要的下半部使用。软中断可以同时在所有处理器上执行，即使类型相同，所以在使用软中断时要特别小心资源保护。
	  一个软中断不能抢占另一个软中断，能抢占软中断的只有中断处理程序。软中断被标记后才会得到执行，raise_softirq()将软中断挂起，在下次调用do_softirq()时投入执行，检查和执行软中断的几处为：
          i. 从一个硬件中断返回时；
          ii. 在ksoftirqd内核线程中周期性执行；
          iii. 在代码中显式检查和执行待处理的软中断代码；
      b. tasklet是利用软中断实现的一种下半部机制，接口简单，锁保护要求也更低。tasklet是利用软中断实现的，有两种软中断HI_SOFTORQ和TASKLET_SOFTIRQ，区别是前者的优先级较高。两个不同类型的tasklet可以在不同的处理器上同时执行，但类型相同的tasklet不能同时执行。
	  每个处理器都有一组辅助处理软中断的内核线程ksoftirqd。当软中断自行重新触发时，并不会马上得到处理，而是唤醒一组内核线程来处理这些负载。
      c. 工作队列可以把工作推后执行，但是与之前的几个下半部机制不一样，工作队列运行在进程上下文中的，允许调度和睡眠。工作队列子系统提供了一个缺省的工作者线程，叫做events/n，每个处理器对应一个线程。每种工作者线程对应一个workqueue_struct结构体，每个CPU有一个cpu_workqueue_struct，每个工作用work_struct结构体表示，这些结构体被连接成链表，当一个工作者线程被唤醒时，它会执行链表上的所有工作。
  9. 在不同的下半部之间做出选择很重要，软中断提供的序列化保障最少，多个类型相同的软中断可能在不同的处理器上同时执行，因此中断处理函数必须格外小心的保护共享数据的安全。
  tasklet是基于软中断实现的，相同类型的tasklet不能同时执行，所以使用起来比较简单。工作队列是用内核线程实现的，运行于进程上下文中，如果有睡眠的需要，工作队列是唯一的选择。但是工作队列牵扯到内核线程和上下文切换，因此开销比较大，所以最好的选择还是tasklet。
